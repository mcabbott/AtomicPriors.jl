
using TensorCast

"""
    post(j, L, Œ†)
    post([j1,j2,...], L, Œ†)

Posterior `p(Œ∏|x‚±º)`, given likelihood matrix `L[i,Œ∏] = p(x·µ¢|Œ∏) ::Matrix`,
and prior `Œ†::Weighted`. For models with a discrete set of outcomes.

Instead of a matrix, `L::Weighted` is fine (weights ignored),
as is `L::Function` for which it finds `L(Œ†)` first.

With `m` observations `[j1, j2, ...]` it'll take the product of such.

    post(findcol(x,X), gauss(X,Œ†,œÉ), Œ†)

This used to have a method `post(x,X,Œ†,œÉ)`, but that was confusing.
"""
function post(j::Int, LX::Matrix, Œ†::Weighted)
    @cast un[Œ∏] := LX[$j,Œ∏] * Œ†.weights[Œ∏]
    Weighted(Œ†.array, normalise(un), wname(Œ†.opt, "p(Œ∏|x)"))
end

post(j::Int, LX::Weighted, Œ†::Weighted) = post(j, LX.array, Œ†)
post(j::Union{Int, AbsVec{Int}}, L::Function, Œ†::Weighted) = post(j, L(Œ†), Œ†)

function post(js::AbsVec{Int}, LX::Weighted, Œ†::Weighted)
    @assert size(LX,2) == size(Œ†,2) "likelihood & prior must have equal number of columns"
    un = copy(LX.weights)
    for j in js
        @cast un[Œ∏] = un[Œ∏] * LX.array[$j,Œ∏]
    end
    Weighted(Œ†.array, normalise!(un), wname(Œ†.opt, "p(Œ∏|xs)"))
end

"""
    gpost(x, Œ†, œÉ)
    gpost(x, f, Œ†, œÉ) = gpost(x, f(Œ†), œÉ)

Posterior `p(Œ∏|x)` for models with Gaussian noise,
i.e. assuming that `p(x|Œ∏) ‚àº ùí©(f(Œ∏),œÉ¬≤)`, without grid `X`.
"""
function gpost(x::AbsVec, f::Function, Œ†::Weighted, œÉ::Real)
    ys = f(Œ†).array
    @assert length(x) == size(ys,1) "length of vector must match height of matrix"
    dist2 = vec(pairwise2(reshape(x,:,1), ys))
    un = Œ†.weights .* exp.(dist2 .* (-0.5/œÉ^2))
    Weighted(Œ†.array, normalise!(un), wname(Œ†.opt, "p(Œ∏|x)"))
end

gpost(x::AbsVec, Œ†::Weighted, œÉ::Real) = gpost(x, identity, Œ†, œÉ)

gpost(x::Real, f::Function, Œ†::Weighted, œÉ::Real) = gpost([x], identity, Œ†, œÉ)
gpost(x::Real, Œ†::Weighted, œÉ::Real) = gpost([x], identity, Œ†, œÉ)

"""
    findcol(x, X)

Finds `j` such that `x ‚âà X[:,j]`, or close.
"""
function findcol(x::Vector, X::Matrix)
    @assert length(x)==size(X,1) "length of vector must match height of matrix"
    dist = vec(pairwise2(reshape(x,:,1), X))
    findfirst(d -> d == minimum(dist), dist)
end
findcol(x::Real, X::Matrix) = findcol([x], X)

"""
    predict(LX, LY)

Bayes predictive density `p(y·µ¢|x‚±º)` for all `y·µ¢ ‚àà Y` and all `x‚±º ‚àà X`,
returned as a `(Matrix)·µ¢‚±º`: each column is one `x‚±º`.
`(LX::Weighted)·µ¢‚Çê` is `p(y·µ¢|Œ∏‚Çê)`, with weights `p(Œ∏‚Çê)` i.e. it contains the prior.

    predict(j, LX, LY=LX) == predict(LX,LY)[:,j]
    predict([j1,j2,...], LX, LY=LX)

Predictive density `p(y|x‚±º)` for particular `x‚±º`, or several.
"""
function predict(LX::Weighted, LY::Weighted=LX)
    @assert size(LX,2) == size(LY,2) "likelihoods must have same number of columns"
    px = LX.array * LX.weights  # normalisation of prior will cancel from result
    ipx = 1 ./ px
    @cast post[Œ∏,x] := LX.array[x,Œ∏] * LX.weights[Œ∏] * ipx[x] # Bayes rule
    LY.array * post # ‚àë_Œ∏ p(y|Œ∏) p(Œ∏|x)
end

function predict(j::Int, LX::Weighted, LY::Weighted=LX)
    @assert size(LX,2) == size(LY,2) "likelihoods must have same number of columns"
    @cast postj[Œ∏] := LX.array[$j,Œ∏] * LX.weights[Œ∏]
    LY.array * normalise(postj)
end

function predict(js::AbsVec{Int}, LX::Weighted, LY::Weighted=LX)
    @assert size(LX,2) == size(LY,2) "likelihoods must have same number of columns"
    out = ones(size(LY,1))
    for j in js
        @cast postj[Œ∏] := LX.array[$j,Œ∏] * LX.weights[Œ∏]
        out .*= (LY.array * postj) .* inv(sum(postj))
    end
    out
end

#========== Model Selection ==========#

"""
    evidence(j, L)

This computes `p(x‚±º)` for the model with likelihood matrix `L.array[i,Œ∏] = p(x·µ¢|Œ∏)`,
`L.weights[Œ∏] = p(Œ∏)`, at one point `x‚±º = X[:,j]`.
"""
evidence(j::Int, L::Weighted) = dot(normalise(L.weights), L.array[j,:])
evidence(j::Int, f, Œ†::Weighted) = evidence(j, f(Œ†))

"""
    gevidence(x, y(Œ†), œÉ)

This computes `p(x)` for models with Gaussian noise, i.e. assuming that
`p(x|Œ∏) ‚àº ùí©(y(Œ∏),œÉ¬≤)`. Should be equivalent to `evidence(j, gauss(X,y(Œ†),œÉ))`
with a grid `X`, apart from normalisation (i.e. factors `dx^d`).

Also `gevidence(big, x, y(Œ†), œÉ)` works at higher precision.
"""
function gevidence(T, x::AbsVec, Œ†::Weighted, œÉ::Number)
    d,k = size(Œ†)
    wei = T.(normalise(Œ†.weights))
    iden = T(1/(sqrt(2*T(œÄ))*œÉ)^d)
    dot(wei, exp.(T.((-0.5/œÉ^2) .* pairwise2(x, Œ†.array)))) * iden
end

gevidence(x::AbsVec, Œ†::Weighted, œÉ::Number) = gevidence(Float64, x, Œ†, œÉ)
